Vulnerability: Session Not Terminated on Browser Close

Description:

The application fails to terminate an active session when the user closes the browser or a browser tab, leaving the session active in the background. As a result, reopening the browser allows any individual to access the application without re-authentication. This behavior indicates a lack of proper session management, where session cookies or tokens are not invalidated upon browser/tab closure.

Impact:

This vulnerability can lead to unauthorized access to sensitive information or system functionalities, especially in shared or public environments. If a user closes their browser without logging out and another person gains access to their system, the latter can reopen the browser and continue the session without needing to log in. This increases the risk of session hijacking and data breaches, violating confidentiality and integrity principles.

Remediation:

	1.	Implement session termination on browser/tab close: Utilize JavaScript or other browser APIs to detect browser or tab closures and explicitly invalidate the session on the server side.
	2.	Configure session timeouts: Implement short session inactivity timeouts to automatically log users out after a certain period of inactivity.
	3.	Invalidate session cookies: Use secure, HttpOnly, and SameSite attributes for cookies, and ensure that cookies are set to expire or are destroyed on browser close.
	4.	Encourage explicit logouts: Prompt users to log out explicitly rather than just closing the browser.
	5.	Implement re-authentication on browser restart: Require the user to authenticate again when the browser is reopened.

This detailed description, impact analysis, and remediation steps should help in creating a clear and concise vulnerability report aligned with OWASP standards.